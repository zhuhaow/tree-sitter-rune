==================
Loop expression
==================

loop {
  if x > 10 {
    break x;
  }
}

---

(source_file
  (loop_expression
    body: (block
      (if_expression
        condition: (binary_expression
          left: (path
            (identifier))
          right: (integer))
        consequence: (block
          (break_statement
            (path
              (identifier))))))))

==================
While expression
==================

while x < 10 {
  if x == 5 {
    break;
  }
  x += 1;
}

---

(source_file
  (while_expression
    condition: (binary_expression
      left: (path
        (identifier))
      right: (integer))
    body: (block
      (if_expression
        condition: (binary_expression
          left: (path
            (identifier))
          right: (integer))
        consequence: (block
          (break_statement)))
      (compound_assignment_statement
        left: (path
          (identifier))
        right: (integer)))))

==================
For expression
==================

for item in collection {
  total += item;
  if total > 100 {
    break total;
  }
}

---

(source_file
  (for_expression
    pattern: (identifier)
    iterator: (path
      (identifier))
    body: (block
      (compound_assignment_statement
        left: (path
          (identifier))
        right: (path
          (identifier)))
      (if_expression
        condition: (binary_expression
          left: (path
            (identifier))
          right: (integer))
        consequence: (block
          (break_statement
            (path
              (identifier))))))))

==================
Break statement
==================

loop {
  break;
}

---

(source_file
  (loop_expression
    body: (block
      (break_statement))))

==================
Continue statement
==================

while true {
  if x < 5 {
    continue;
  }
  x += 1;
}

---

(source_file
  (while_expression
    condition: (boolean)
    body: (block
      (if_expression
        condition: (binary_expression
          left: (path
            (identifier))
          right: (integer))
        consequence: (block
          (continue_statement)))
      (compound_assignment_statement
        left: (path
          (identifier))
        right: (integer)))))

==================
Break with value
==================

let result = loop {
  if condition {
    break "success";
  }
};

---

(source_file
  (let_statement
    name: (identifier)
    value: (loop_expression
      body: (block
        (if_expression
          condition: (path
            (identifier))
          consequence: (block
            (break_statement
              (static_string))))))))

==================
Loop with labeled break
==================

'outer: loop {
  loop {
    break 'outer;
  }
}

---

(source_file
  (loop_expression
    label: (loop_label
      name: (identifier))
    body: (block
      (loop_expression
        body: (block
          (break_statement
            label: (identifier)))))))
