==================
Half-open range expressions
==================

let full_range = start..end;
let from_start = start..;
let to_end = ..end;
let full_unbounded = ..;

for i in 0..10 {
  println!(i);
}

---

(source_file
  (let_statement
    name: (identifier)
    value: (range_expression
      start: (path
        (identifier))
      end: (path
        (identifier))))
  (let_statement
    name: (identifier)
    value: (range_expression
      start: (path
        (identifier))))
  (let_statement
    name: (identifier)
    value: (range_expression
      end: (path
        (identifier))))
  (let_statement
    name: (identifier)
    value: (range_expression))
  (for_expression
    pattern: (identifier)
    iterator: (range_expression
      start: (integer)
      end: (integer))
    body: (block
      (expression_statement
        (macro_invocation
          macro: (path
            (identifier))
          arguments: (argument_list
            (path
              (identifier))))))))

==================
Closed/inclusive range expressions
==================

let inclusive_range = start..=end;
let to_end_inclusive = ..=end;

for i in 1..=5 {
  println!(i);
}

---

(source_file
  (let_statement
    name: (identifier)
    value: (range_expression
      start: (path
        (identifier))
      end: (path
        (identifier))))
  (let_statement
    name: (identifier)
    value: (range_expression
      end: (path
        (identifier))))
  (for_expression
    pattern: (identifier)
    iterator: (range_expression
      start: (integer)
      end: (integer))
    body: (block
      (expression_statement
        (macro_invocation
          macro: (path
            (identifier))
          arguments: (argument_list
            (path
              (identifier))))))))

==================
Range expressions as statements
==================

0..10;
a..=b;

---

(source_file
  (expression_statement
    (range_expression
      start: (integer)
      end: (integer)))
  (expression_statement
    (range_expression
      start: (path
        (identifier))
      end: (path
        (identifier)))))
