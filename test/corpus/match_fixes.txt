===================
Fixed match with enum pattern
===================

match result {
    Ok(value) => value,
    Err(e) => panic(e)
};

---

(source_file
  (expression_statement
    (match_expression
      (path
        (identifier))
      (match_arm
        (pattern
          (enum_variant_pattern
            (path
              (identifier))
            (pattern
              (identifier_pattern
                (identifier)))))
        (path
          (identifier)))
      (match_arm
          (pattern
            (enum_variant_pattern
              (path
                (identifier))
              (pattern
                (identifier_pattern
                  (identifier)))))
          (call_expression
            (path
              (identifier))
            (argument_list
              (path
                (identifier))))))))

===================
Fixed match with block expression
===================

match result {
    Ok(value) => {
        let doubled = value * 2;
        doubled
    },
    Err(e) => {
        print(e);
        -1
    }
};

---

(source_file
  (expression_statement
    (match_expression
      (path
        (identifier))
      (match_arm
        (pattern
          (enum_variant_pattern
            (path
              (identifier))
            (pattern
              (identifier_pattern
                (identifier)))))
        (block
            (let_statement
              (identifier)
              (binary_expression
                (path
                  (identifier))
                (integer)))
            (path
              (identifier))))
        (match_arm
          (pattern
            (enum_variant_pattern
              (path
                (identifier))
              (pattern
                (identifier_pattern
                  (identifier)))))
          (block
            (expression_statement
              (call_expression
                (path
                  (identifier))
                (argument_list
                  (path
                    (identifier)))))
            (unary_expression
              (integer)))))))

===================
Match with guard expression
===================

match value {
    n if n > 0 => "positive",
    n if n < 0 => "negative",
    _ => "zero"
};

---

(source_file
  (expression_statement
    (match_expression
        (path
          (identifier))
        (match_arm
          (pattern
            (identifier_pattern
              (identifier)))
          (binary_expression
            (path
              (identifier))
            (integer))
          (static_string))
        (match_arm
          (pattern
            (identifier_pattern
              (identifier)))
          (binary_expression
            (path
              (identifier))
            (integer))
          (static_string))
        (match_arm
          (pattern
            (wildcard_pattern))
          (static_string)))))

===================
Complex nested enum pattern
===================

match result {
    Ok(Some(value)) => value,
    Ok(None) => 0,
    Err(e) => panic(e)
};

---

(source_file
  (expression_statement
    (match_expression
        (path
          (identifier))
        (match_arm
          (pattern
            (enum_variant_pattern
              (path
                (identifier))
              (pattern
                (enum_variant_pattern
                  (path
                    (identifier))
                  (pattern
                    (identifier_pattern
                      (identifier)))))))
          (path
            (identifier)))
        (match_arm
          (pattern
            (enum_variant_pattern
              (path
                (identifier))
              (pattern
                (identifier_pattern
                  (identifier)))))
          (integer))
        (match_arm
          (pattern
            (enum_variant_pattern
              (path
                (identifier))
              (pattern
                (identifier_pattern
                  (identifier)))))
          (call_expression
            (path
              (identifier))
            (argument_list
              (path
                (identifier))))))))

===================
Match with multiple patterns for same arm
===================

match code {
    200 | 201 | 204 => "success",
    400 | 401 | 403 | 404 => "client error",
    500 | 501 | 503 => "server error",
    _ => "unknown"
};

---

(source_file
  (expression_statement
    (match_expression
        (path
          (identifier))
        (match_arm
          (pattern
            (or_pattern
              (literal_pattern
                (integer))
              (pattern
                (or_pattern
                  (literal_pattern
                    (integer))
                  (literal_pattern
                    (integer))))))
          (static_string))
        (match_arm
          (pattern
            (or_pattern
              (literal_pattern
                (integer))
              (pattern
                (or_pattern
                  (literal_pattern
                    (integer))
                  (pattern
                    (or_pattern
                      (literal_pattern
                        (integer))
                      (literal_pattern
                        (integer))))))))
          (static_string))
        (match_arm
          (pattern
            (or_pattern
              (literal_pattern
                (integer))
              (pattern
                (or_pattern
                  (literal_pattern
                    (integer))
                  (literal_pattern
                    (integer))))))
          (static_string))
        (match_arm
          (pattern
            (wildcard_pattern))
          (static_string)))))
