==================
Simple Template Literals
==================

let greeting = `Hello, World!`;
return greeting;

---

(source_file
      (let_statement
        (identifier)
        (template_literal
          (template_chars)))
      (return_statement
        (path
          (identifier))))

==================
Template Literals with Interpolation
==================

let name = "Rune";
let greeting = `Hello, ${name}!`;
return greeting;

---

(source_file
      (let_statement
        (identifier)
        (static_string))
      (let_statement
        (identifier)
        (template_literal
          (template_chars)
          (template_interpolation
            (path
              (identifier)))
          (template_chars)))
      (return_statement
        (path
          (identifier))))

==================
Template Literals with Complex Expressions
==================

let a = 5;
let b = 10;
let result = `Sum: ${a + b}, Product: ${a * b}`;
return result;

---

(source_file
      (let_statement
        (identifier)
        (integer))
      (let_statement
        (identifier)
        (integer))
      (let_statement
        (identifier)
        (template_literal
          (template_chars)
          (template_interpolation
            (binary_expression
              (path
                (identifier))
              (path
                (identifier))))
          (template_chars)
          (template_interpolation
            (binary_expression
              (path
                (identifier))
              (path
                (identifier))))))
      (return_statement
        (path
          (identifier))))

==================
Template Literals with Macro Invocation
==================

let vec = [1, 2, 3];
dbg!(`${vec}`);
return vec;

---

(source_file
      (let_statement
        (identifier)
        (vector
          (integer)
          (integer)
          (integer)))
      (expression_statement
        (macro_invocation
          (path
            (identifier))
          (argument_list
            (template_literal
              (template_interpolation
                (path
                  (identifier)))))))
      (return_statement
        (path
          (identifier))))
