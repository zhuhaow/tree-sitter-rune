===
Simple Closure
===

  |a, b| a + b;

---

(source_file
  (expression_statement
    (closure_expression
      parameters: (closure_parameter_list
        (parameter
          name: (identifier))
        (parameter
          name: (identifier)))
      body: (binary_expression
        left: (path (identifier))
        right: (path (identifier))))))

===
Closure as Function Argument
===

  calculate(|a, b| a * b);

---

(source_file
  (expression_statement
    (call_expression
      function: (path (identifier))
      arguments: (argument_list
        (closure_expression
          parameters: (closure_parameter_list
            (parameter
              name: (identifier))
            (parameter
              name: (identifier)))
          body: (binary_expression
            left: (path (identifier))
            right: (path (identifier))))))))

===
Closure with Capturing Variables
===

  let n = 10;
  work(|a, b| n + a + b);

---

(source_file
  (let_statement
    name: (identifier)
    value: (integer))
  (expression_statement
    (call_expression
      function: (path (identifier))
      arguments: (argument_list
        (closure_expression
          parameters: (closure_parameter_list
            (parameter
              name: (identifier))
            (parameter
              name: (identifier)))
          body: (binary_expression
            left: (binary_expression
              left: (path (identifier))
              right: (path (identifier)))
            right: (path (identifier))))))))
===
Async Closure with Block Body
===

  let handler = async || {
    Ok(http::get(url).await?.status())
  };

---

(source_file
  (let_statement
    name: (identifier)
    value: (closure_expression
      parameters: (closure_parameter_list)
      body: (block
        (call_expression
          function: (path (identifier))
          arguments: (argument_list
            (call_expression
              function: (member_expression
                object: (try_expression
                  expression: (member_expression
                    object: (call_expression
                      function: (path
                        (identifier)
                        (identifier))
                      arguments: (argument_list
                        (path
                          (identifier))))
                    property: (await_keyword)))
                property: (identifier))
              arguments: (argument_list))))))))
