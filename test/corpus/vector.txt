===
Empty Vector
===

fn test() {
  []
}

---

(source_file
  (fn_declaration
    (identifier)
    (parameter_list)
    (block
      (vector))))

===
Vector with one integer
===

fn test() {
  [1]
}

---

(source_file
  (fn_declaration
    (identifier)
    (parameter_list)
    (block
      (vector
        (integer)))))

===
Vector with multiple primitives
===

fn test() {
  ["hello", 42, true]
}

---

(source_file
  (fn_declaration
    (identifier)
    (parameter_list)
    (block
      (vector
        (static_string)
        (integer)
        (boolean)))))

===
Vector with trailing comma
===

fn test() {
  [1, 2, ]
}

---

(source_file
  (fn_declaration
    (identifier)
    (parameter_list)
    (block
      (vector
        (integer)
        (integer)))))

===
Vector with nested vector
===

fn test() {
  [[1, 2], ["a", "b"]]
}

---

(source_file
  (fn_declaration
    (identifier)
    (parameter_list)
    (block
      (vector
        (vector
          (integer)
          (integer))
        (vector
          (static_string)
          (static_string))))))

===
Vector with mixed types and trailing comma
===

fn test() {
  [false, "test", 123, [true, "nested"], ]
}

---

(source_file
  (fn_declaration
    (identifier)
    (parameter_list)
    (block
      (vector
        (boolean)
        (static_string)
        (integer)
        (vector
          (boolean)
          (static_string))))))
