===
Operator precedence
===

a + b * c;
a * b + c;
a || b && c;
a | b ^ c & d;
a == b < c;
a << b + c;
x.y[i].z();
!-x;

---

(source_file
  (expression_statement
    (binary_expression
      left: (path
        (identifier))
      right: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))))
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (path
        (identifier))
      right: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))))
  (expression_statement
    (binary_expression
      left: (path
        (identifier))
      right: (binary_expression
        left: (path
          (identifier))
        right: (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier))))))
  (expression_statement
    (binary_expression
      left: (path
        (identifier))
      right: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))))
  (expression_statement
    (binary_expression
      left: (path
        (identifier))
      right: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))))
  (expression_statement
    (call_expression
      function: (member_expression
        object: (index_expression
          object: (member_expression
            object: (path
              (identifier))
            property: (identifier))
          index: (path
            (identifier)))
        property: (identifier))
      arguments: (argument_list)))
  (expression_statement
    (unary_expression
      argument: (unary_expression
        argument: (path
          (identifier))))))

===
Nested expressions with parentheses
===

(a + b) * c;
a * (b + c);
(a || b) && c;
a || (b && c);

---

(source_file
  (expression_statement
    (binary_expression
      left: (parenthesized_expression
        (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier))))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (path
        (identifier))
      right: (parenthesized_expression
        (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier))))))
  (expression_statement
    (binary_expression
      left: (parenthesized_expression
        (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier))))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (path
        (identifier))
      right: (parenthesized_expression
        (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier)))))))

===
Complex expressions
===

a + b * c || d && e < f;
a.b.c[d + e * f]();
!(a == b) && c || d;
a << b + c * d;

---

(source_file
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier))))
      right: (binary_expression
        left: (path
          (identifier))
        right: (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier))))))
  (expression_statement
    (call_expression
      function: (index_expression
        object: (member_expression
          object: (member_expression
            object: (path
              (identifier))
            property: (identifier))
          property: (identifier))
        index: (binary_expression
          left: (path
            (identifier))
          right: (binary_expression
            left: (path
              (identifier))
            right: (path
              (identifier)))))
      arguments: (argument_list)))
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (unary_expression
          argument: (parenthesized_expression
            (binary_expression
              left: (path
                (identifier))
              right: (path
                (identifier)))))
        right: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (path
        (identifier))
      right: (binary_expression
        left: (path
          (identifier))
        right: (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier)))))))

===
Unary operators precedence
===

!a && b;
-a + b;
!a.b;
!(a || b);
-a * b;

---

(source_file
  (expression_statement
    (binary_expression
      left: (unary_expression
        argument: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (unary_expression
        argument: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (unary_expression
      argument: (member_expression
        object: (path
          (identifier))
        property: (identifier))))
  (expression_statement
    (unary_expression
      argument: (parenthesized_expression
        (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier))))))
  (expression_statement
    (binary_expression
      left: (unary_expression
        argument: (path
          (identifier)))
      right: (path
        (identifier)))))

===
Member, index, and call precedence
===

a.b();
a[b]();
a.b[c];
a[b].c;
a.b.c();
a().b;
(a + b).c;

---

(source_file
  (expression_statement
    (call_expression
      function: (member_expression
        object: (path
          (identifier))
        property: (identifier))
      arguments: (argument_list)))
  (expression_statement
    (call_expression
      function: (index_expression
        object: (path
          (identifier))
        index: (path
          (identifier)))
      arguments: (argument_list)))
  (expression_statement
    (index_expression
      object: (member_expression
        object: (path
          (identifier))
        property: (identifier))
      index: (path
        (identifier))))
  (expression_statement
    (member_expression
      object: (index_expression
        object: (path
          (identifier))
        index: (path
          (identifier)))
      property: (identifier)))
  (expression_statement
    (call_expression
      function: (member_expression
        object: (member_expression
          object: (path
            (identifier))
          property: (identifier))
        property: (identifier))
      arguments: (argument_list)))
  (expression_statement
    (member_expression
      object: (call_expression
        function: (path
          (identifier))
        arguments: (argument_list))
      property: (identifier)))
  (expression_statement
    (member_expression
      object: (parenthesized_expression
        (binary_expression
          left: (path
            (identifier))
          right: (path
            (identifier))))
      property: (identifier))))

===
Associativity
===

a + b + c;
a * b * c;
a && b && c;
a || b || c;
a | b | c;
a ^ b ^ c;
a & b & c;

---

(source_file
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))
      right: (path
        (identifier))))
  (expression_statement
    (binary_expression
      left: (binary_expression
        left: (path
          (identifier))
        right: (path
          (identifier)))
      right: (path
        (identifier)))))
